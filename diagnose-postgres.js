// diagnose-postgres.js - Script de diagn√≥stico do PostgreSQL
const { Client } = require('pg');
const net = require('net');
require('dotenv').config();

async function diagnosePostgres() {
    console.log('üîç Diagn√≥stico do PostgreSQL...\n');
    
    // 1. Verificar vari√°veis de ambiente
    console.log('üìã Vari√°veis de ambiente:');
    console.log(`   PGHOST: ${process.env.PGHOST || 'localhost (padr√£o)'}`);
    console.log(`   PGPORT: ${process.env.PGPORT || '5432 (padr√£o)'}`);
    console.log(`   PGUSER: ${process.env.PGUSER || 'postgres (padr√£o)'}`);
    console.log(`   PGDATABASE: ${process.env.PGDATABASE || 'gestor_pro_dev (padr√£o)'}`);
    console.log(`   PGPASSWORD: ${process.env.PGPASSWORD ? '***definida***' : 'n√£o definida'}`);
    console.log('');
    
    // 2. Verificar conectividade de rede
    const host = process.env.PGHOST || 'localhost';
    const port = process.env.PGPORT || 5432;
    
    console.log(`üåê Testando conectividade com ${host}:${port}...`);
    
    try {
        await new Promise((resolve, reject) => {
            const socket = new net.Socket();
            const timeout = setTimeout(() => {
                socket.destroy();
                reject(new Error('Timeout'));
            }, 5000);
            
            socket.connect(port, host, () => {
                clearTimeout(timeout);
                socket.destroy();
                resolve();
            });
            
            socket.on('error', (error) => {
                clearTimeout(timeout);
                reject(error);
            });
        });
        console.log('‚úÖ Conectividade de rede OK');
    } catch (error) {
        console.log('‚ùå Problema de conectividade de rede:', error.message);
        console.log('   Verifique se o PostgreSQL est√° rodando na porta', port);
        return;
    }
    
    // 3. Tentar conectar ao PostgreSQL
    console.log('\nüîå Testando conex√£o com PostgreSQL...');
    
    const config = {
        host: host,
        port: parseInt(port),
        user: process.env.PGUSER || 'postgres',
        password: process.env.PGPASSWORD || '123456',
        database: 'postgres',
        connectionTimeoutMillis: 5000
    };
    
    const client = new Client(config);
    
    try {
        await client.connect();
        console.log('‚úÖ Conex√£o com PostgreSQL estabelecida');
        
        // 4. Verificar vers√£o
        const versionResult = await client.query('SELECT version()');
        console.log('üìä Vers√£o do PostgreSQL:', versionResult.rows[0].version.split(',')[0]);
        
        // 5. Verificar bancos existentes
        const databasesResult = await client.query(`
            SELECT datname FROM pg_database 
            WHERE datistemplate = false 
            ORDER BY datname
        `);
        
        console.log('üìÅ Bancos de dados existentes:');
        databasesResult.rows.forEach(row => {
            console.log(`   - ${row.datname}`);
        });
        
        // 6. Verificar se o banco do projeto existe
        const targetDb = process.env.PGDATABASE || 'gestor_pro_dev';
        const dbExists = databasesResult.rows.find(row => row.datname === targetDb);
        
        if (dbExists) {
            console.log(`‚úÖ Banco '${targetDb}' existe`);
        } else {
            console.log(`‚ùå Banco '${targetDb}' n√£o existe`);
            console.log('   Execute: node setup-database.js');
        }
        
    } catch (error) {
        console.log('‚ùå Erro na conex√£o com PostgreSQL:', error.message);
        
        if (error.code === '28P01') {
            console.log('\nüîë Problema de autentica√ß√£o!');
            console.log('üìã Solu√ß√µes:');
            console.log('1. Verifique a senha do usu√°rio postgres');
            console.log('2. Tente conectar manualmente: psql -U postgres -h localhost');
            console.log('3. Se necess√°rio, altere a senha: ALTER USER postgres PASSWORD \'nova_senha\';');
        }
        
        if (error.code === 'ECONNREFUSED') {
            console.log('\nüîå Servi√ßo n√£o dispon√≠vel!');
            console.log('üìã Solu√ß√µes:');
            console.log('1. Verifique se o PostgreSQL est√° instalado');
            console.log('2. Inicie o servi√ßo do PostgreSQL');
            console.log('3. No Windows: services.msc > PostgreSQL > Start');
        }
        
        if (error.code === 'ENOTFOUND') {
            console.log('\nüåê Host n√£o encontrado!');
            console.log('üìã Solu√ß√µes:');
            console.log('1. Verifique se o host est√° correto');
            console.log('2. Verifique se o PostgreSQL est√° rodando');
        }
        
    } finally {
        await client.end();
    }
    
    console.log('\nüéØ Resumo do diagn√≥stico:');
    console.log('‚úÖ Servidor melhorado funcionando');
    console.log('‚úÖ Rotas da API carregadas');
    console.log('‚ö†Ô∏è  Banco de dados precisa ser configurado');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Configure o PostgreSQL (se necess√°rio)');
    console.log('2. Execute: node setup-database.js');
    console.log('3. Execute: npm run db:migrate');
    console.log('4. Execute: npm run db:seed');
    console.log('5. Execute: node server-improved.js');
}

// Executar diagn√≥stico
diagnosePostgres().catch(error => {
    console.error('‚ùå Erro no diagn√≥stico:', error);
}); 