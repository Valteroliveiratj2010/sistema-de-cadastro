'use strict';

// For√ßar ambiente de produ√ß√£o para garantir SSL
process.env.NODE_ENV = 'production';

const path = require('path');
// Certifique-se de que o dotenv seja carregado no in√≠cio da sua aplica√ß√£o principal (server.js)
// Para um seeder standalone, voc√™ pode precisar carreg√°-lo aqui tamb√©m se ele n√£o for
// executado no contexto da sua aplica√ß√£o principal que j√° carrega o dotenv.
// const dotenv = require('dotenv');
// dotenv.config();

const db = require(path.join(__dirname, '..', 'database'));
const User = db.User;
const sequelizeInstance = db.sequelize;

async function runAdminSeeder() {
  try {
    await sequelizeInstance.authenticate();
    console.log('‚úÖ Conex√£o com o banco de dados para o seeder estabelecida com sucesso.');

    // --- Credenciais do Usu√°rio Admin para o Seeder (Lendo de Vari√°veis de Ambiente) ---
    const newUsername = process.env.ADMIN_USERNAME || 'admin'; // Valor padr√£o se a vari√°vel n√£o estiver definida
    const newEmail = process.env.ADMIN_EMAIL || 'admin@example.com';
    const plainPassword = process.env.ADMIN_PASSWORD;

    if (!plainPassword) {
      throw new Error('‚ùå Vari√°vel de ambiente ADMIN_PASSWORD n√£o definida. N√£o √© poss√≠vel criar o admin.');
    }
    // --- Fim das Credenciais ---

    // IMPORTANTE: N√ÉO fazer hash aqui! O modelo User.js far√° isso automaticamente no hook beforeCreate
    // const hashedPassword = await bcrypt.hash(plainPassword, 10); // REMOVIDO - causa hash duplo!

    const [user, created] = await User.findOrCreate({
      where: { username: newUsername },
      defaults: {
        username: newUsername,
        email: newEmail,
        password: plainPassword, // Senha em texto plano - o modelo far√° o hash
        role: 'admin',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });

    if (created) {
      console.log(`‚úî Usu√°rio admin '${newUsername}' criado com sucesso!`);
      console.log(`üîë Senha configurada: ${plainPassword}`);
    } else {
      console.log(`‚Ñπ Usu√°rio admin '${newUsername}' j√° existe. Nenhuma a√ß√£o necess√°ria.`);
    }
  } catch (error) {
    console.error('‚ùå Erro ao executar o seeder de admin:', error);
    if (error.name === 'SequelizeUniqueConstraintError') {
      console.error('‚ö†Ô∏è Detalhe do erro de unicidade:', error.errors.map(e => e.message).join(', '));
    }
    process.exit(1); // Ainda encerra para garantir que o deploy falhe se o seeder falhar criticamente
  } finally {
    // N√ÉO fechar a conex√£o aqui, pois o servidor principal ainda precisa dela
    // if (sequelizeInstance) {
    //   await sequelizeInstance.close();
    //   console.log('Conex√£o com o banco de dados para o seeder fechada.');
    // }
    console.log('‚úÖ Seeder de admin conclu√≠do. Conex√£o mantida para o servidor.');
  }
}

runAdminSeeder();