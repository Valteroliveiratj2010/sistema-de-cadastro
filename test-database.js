#!/usr/bin/env node

// Script para testar a conex√£o com o banco de dados
require('dotenv').config();

// For√ßar ambiente de produ√ß√£o para usar configura√ß√£o SSL
process.env.NODE_ENV = 'production';

console.log('üîç Testando conex√£o com o banco de dados...\n');
console.log(`üåç Ambiente: ${process.env.NODE_ENV}`);

async function testDatabase() {
    try {
        console.log('1Ô∏è‚É£ Carregando configura√ß√£o do banco...');
        
        const { sequelize } = require('./backend/database');
        
        console.log('2Ô∏è‚É£ Tentando conectar com o banco...');
        await sequelize.authenticate();
        
        console.log('‚úÖ Conex√£o com o banco estabelecida com sucesso!');
        
        console.log('\n3Ô∏è‚É£ Verificando se as tabelas existem...');
        const tables = await sequelize.showAllSchemas();
        console.log('Tabelas encontradas:', tables.length);
        
        // Verificar tabelas espec√≠ficas
        const tableNames = ['Users', 'Clients', 'Products', 'Sales', 'Payments'];
        for (const tableName of tableNames) {
            try {
                const tableExists = await sequelize.getQueryInterface().showAllTables();
                if (tableExists.includes(tableName.toLowerCase())) {
                    console.log(`‚úÖ Tabela ${tableName} existe`);
                } else {
                    console.log(`‚ùå Tabela ${tableName} n√£o encontrada`);
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è Erro ao verificar tabela ${tableName}:`, error.message);
            }
        }
        
        console.log('\n4Ô∏è‚É£ Verificando se existe usu√°rio admin...');
        const { User } = require('./backend/database');
        const adminUser = await User.findOne({ where: { role: 'admin' } });
        
        if (adminUser) {
            console.log('‚úÖ Usu√°rio admin encontrado:', adminUser.username);
        } else {
            console.log('‚ùå Usu√°rio admin n√£o encontrado');
            console.log('üí° Execute o seeder: node backend/seeders/adminSeeder.js');
        }
        
        console.log('\nüìä Resumo:');
        console.log('‚úÖ Banco de dados conectado');
        console.log('‚úÖ Configura√ß√£o correta');
        
        if (!adminUser) {
            console.log('‚ö†Ô∏è Usu√°rio admin n√£o existe - execute o seeder');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao conectar com o banco:', error.message);
        
        if (error.name === 'SequelizeConnectionError') {
            console.log('\nüí° Poss√≠veis solu√ß√µes:');
            console.log('1. Verifique se a DATABASE_URL est√° correta');
            console.log('2. Confirme se o banco PostgreSQL est√° ativo');
            console.log('3. Verifique se as credenciais est√£o corretas');
            console.log('4. Confirme se o banco existe');
        } else if (error.name === 'SequelizeHostNotFoundError') {
            console.log('\nüí° Erro de host n√£o encontrado:');
            console.log('1. Verifique se a URL do banco est√° correta');
            console.log('2. Confirme se o servi√ßo de banco est√° online');
        } else if (error.name === 'SequelizeAccessDeniedError') {
            console.log('\nüí° Erro de acesso negado:');
            console.log('1. Verifique usu√°rio e senha');
            console.log('2. Confirme se o usu√°rio tem permiss√µes');
        } else if (error.message.includes('SSL/TLS')) {
            console.log('\nüí° Problema de SSL detectado:');
            console.log('1. Verifique se DATABASE_URL inclui par√¢metros SSL');
            console.log('2. Confirme se o banco est√° configurado para SSL');
        }
        
        console.log('\nüîß Vari√°veis de ambiente necess√°rias:');
        console.log('- DATABASE_URL (para produ√ß√£o)');
        console.log('- DB_HOST, DB_USER, DB_PASSWORD, DB_NAME (para desenvolvimento)');
    } finally {
        process.exit(0);
    }
}

// Executar teste
testDatabase(); 