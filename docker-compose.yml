version: '3.8'

services:
  # Aplicação principal
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:gestor_pro_password@db:5432/gestor_pro
      - JWT_SECRET=gestor_pro_jwt_secret_2024
      - JWT_EXPIRES_IN=24h
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=admin123
      - ADMIN_EMAIL=admin@gestorpro.com
      - ENABLE_LOGGING=true
    depends_on:
      - db
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
    networks:
      - gestor-network

  # Banco de dados PostgreSQL
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=gestor_pro
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=gestor_pro_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - gestor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - gestor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - gestor-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  gestor-network:
    driver: bridge 