#!/usr/bin/env node

// Script para criar usu√°rio admin diretamente
require('dotenv').config();

// For√ßar ambiente de produ√ß√£o
process.env.NODE_ENV = 'production';

console.log('üë§ Criando usu√°rio admin diretamente...\n');
console.log(`üåç Ambiente: ${process.env.NODE_ENV}`);

async function createAdmin() {
    try {
        console.log('1Ô∏è‚É£ Carregando modelo User...');
        const { User, sequelize } = require('./backend/database');
        
        console.log('2Ô∏è‚É£ Conectando ao banco...');
        await sequelize.authenticate();
        console.log('‚úÖ Conex√£o estabelecida');
        
        console.log('\n3Ô∏è‚É£ Verificando usu√°rio admin existente...');
        const existingAdmin = await User.findOne({ where: { role: 'admin' } });
        
        if (existingAdmin) {
            console.log(`‚ö†Ô∏è Usu√°rio admin existente encontrado: ${existingAdmin.username}`);
            console.log('üóëÔ∏è Removendo usu√°rio admin existente...');
            await existingAdmin.destroy();
            console.log('‚úÖ Usu√°rio admin removido');
        }
        
        console.log('\n4Ô∏è‚É£ Criando novo usu√°rio admin...');
        
        const adminData = {
            username: process.env.ADMIN_USERNAME || 'admin',
            email: process.env.ADMIN_EMAIL || 'admin@example.com',
            password: process.env.ADMIN_PASSWORD,
            role: 'admin'
        };
        
        if (!adminData.password) {
            throw new Error('ADMIN_PASSWORD n√£o configurada no ambiente');
        }
        
        console.log(`üìù Dados do admin:`);
        console.log(`   Usu√°rio: ${adminData.username}`);
        console.log(`   Email: ${adminData.email}`);
        console.log(`   Senha: ${'*'.repeat(adminData.password.length)}`);
        console.log(`   Role: ${adminData.role}`);
        
        // Criar usu√°rio (o modelo far√° o hash automaticamente)
        const newAdmin = await User.create(adminData);
        
        console.log('‚úÖ Usu√°rio admin criado com sucesso!');
        console.log(`   ID: ${newAdmin.id}`);
        console.log(`   Usu√°rio: ${newAdmin.username}`);
        console.log(`   Email: ${newAdmin.email}`);
        console.log(`   Role: ${newAdmin.role}`);
        
        console.log('\n5Ô∏è‚É£ Testando senha...');
        const isPasswordValid = await newAdmin.comparePassword(adminData.password);
        
        if (isPasswordValid) {
            console.log('‚úÖ Senha funcionando corretamente!');
        } else {
            console.log('‚ùå Problema com a senha detectado');
        }
        
        console.log('\nüìä Resumo:');
        console.log('‚úÖ Usu√°rio admin criado');
        console.log('‚úÖ Hash de senha funcionando');
        console.log('‚úÖ Sistema pronto para login');
        
        console.log('\nüîë Credenciais para login:');
        console.log(`   Usu√°rio: ${adminData.username}`);
        console.log(`   Senha: ${adminData.password}`);
        
        console.log('\nüß™ Para testar o login:');
        console.log('1. Abra test-login.html no navegador');
        console.log('2. Use as credenciais acima');
        
    } catch (error) {
        console.error('‚ùå Erro ao criar usu√°rio admin:', error.message);
        
        if (error.name === 'SequelizeConnectionError') {
            console.log('\nüí° Problema de conex√£o detectado');
            console.log('1. Verifique se o banco est√° online');
            console.log('2. Tente novamente em alguns segundos');
            console.log('3. Verifique a DATABASE_URL');
        } else if (error.name === 'SequelizeUniqueConstraintError') {
            console.log('\nüí° Usu√°rio j√° existe');
            console.log('Execute: node test-password-hash.js para verificar');
        }
    } finally {
        process.exit(0);
    }
}

// Executar cria√ß√£o
createAdmin(); 