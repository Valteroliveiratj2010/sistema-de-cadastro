#!/usr/bin/env node

// Script para configurar o banco de dados automaticamente
require('dotenv').config();

// For√ßar ambiente de produ√ß√£o para usar configura√ß√£o SSL
process.env.NODE_ENV = 'production';

console.log('üöÄ Configurando banco de dados...\n');
console.log(`üåç Ambiente: ${process.env.NODE_ENV}`);

async function setupDatabase() {
    try {
        console.log('1Ô∏è‚É£ Testando conex√£o com o banco...');
        const { sequelize, User } = require('./backend/database');
        await sequelize.authenticate();
        console.log('‚úÖ Conex√£o estabelecida');
        
        console.log('\n2Ô∏è‚É£ Executando migra√ß√µes...');
        const { execSync } = require('child_process');
        
        try {
            execSync('npx sequelize-cli db:migrate', { 
                stdio: 'inherit',
                cwd: process.cwd(),
                env: { ...process.env, NODE_ENV: 'production' }
            });
            console.log('‚úÖ Migra√ß√µes executadas com sucesso');
        } catch (migrationError) {
            console.log('‚ö†Ô∏è Erro nas migra√ß√µes:', migrationError.message);
            console.log('üí° Tentando continuar...');
        }
        
        console.log('\n3Ô∏è‚É£ Verificando usu√°rio admin existente...');
        const existingAdmin = await User.findOne({ where: { role: 'admin' } });
        
        if (existingAdmin) {
            console.log(`‚ö†Ô∏è Usu√°rio admin existente encontrado: ${existingAdmin.username}`);
            console.log('üóëÔ∏è Removendo usu√°rio admin existente para evitar problemas de hash...');
            await existingAdmin.destroy();
            console.log('‚úÖ Usu√°rio admin removido');
        }
        
        console.log('\n4Ô∏è‚É£ Executando seeder do admin...');
        try {
            require('./backend/seeders/adminSeeder');
            console.log('‚úÖ Seeder executado');
        } catch (seederError) {
            console.log('‚ö†Ô∏è Erro no seeder:', seederError.message);
        }
        
        console.log('\n5Ô∏è‚É£ Verificando configura√ß√£o final...');
        const adminUser = await User.findOne({ where: { role: 'admin' } });
        
        if (adminUser) {
            console.log('‚úÖ Usu√°rio admin criado:', adminUser.username);
            
            // Testar se a senha est√° funcionando
            const plainPassword = process.env.ADMIN_PASSWORD;
            if (plainPassword) {
                const isPasswordValid = await adminUser.comparePassword(plainPassword);
                if (isPasswordValid) {
                    console.log('‚úÖ Senha do admin est√° funcionando corretamente');
                } else {
                    console.log('‚ùå Problema com a senha do admin detectado');
                }
            }
        } else {
            console.log('‚ùå Usu√°rio admin n√£o encontrado');
        }
        
        console.log('\nüìä Configura√ß√£o conclu√≠da!');
        console.log('‚úÖ Banco de dados configurado');
        console.log('‚úÖ Tabelas criadas');
        console.log('‚úÖ Usu√°rio admin criado');
        
        console.log('\nüîë Credenciais do admin:');
        console.log(`Usu√°rio: ${process.env.ADMIN_USERNAME || 'admin'}`);
        console.log(`Senha: ${process.env.ADMIN_PASSWORD ? '***' : 'N√£o configurada'}`);
        
        if (!process.env.ADMIN_PASSWORD) {
            console.log('\n‚ö†Ô∏è ADMIN_PASSWORD n√£o configurada!');
            console.log('Configure a vari√°vel de ambiente ADMIN_PASSWORD');
        }
        
        console.log('\nüß™ Para testar o login, execute:');
        console.log('node test-password-hash.js');
        
    } catch (error) {
        console.error('‚ùå Erro na configura√ß√£o:', error.message);
        
        if (error.name === 'SequelizeConnectionError') {
            console.log('\nüí° Verifique:');
            console.log('1. DATABASE_URL est√° configurada corretamente');
            console.log('2. Banco PostgreSQL est√° ativo');
            console.log('3. Credenciais est√£o corretas');
        } else if (error.message.includes('SSL/TLS')) {
            console.log('\nüí° Problema de SSL detectado:');
            console.log('1. Verifique se DATABASE_URL inclui par√¢metros SSL');
            console.log('2. Confirme se o banco est√° configurado para SSL');
        }
        
        process.exit(1);
    } finally {
        process.exit(0);
    }
}

// Executar configura√ß√£o
setupDatabase(); 