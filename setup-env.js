#!/usr/bin/env node

// Script para ajudar a configurar vari√°veis de ambiente
const fs = require('fs');
const path = require('path');

console.log('üîß Configura√ß√£o de Vari√°veis de Ambiente\n');

function setupEnv() {
    const envPath = path.join(process.cwd(), '.env');
    
    console.log('1Ô∏è‚É£ Verificando arquivo .env...');
    
    let envContent = '';
    let needsUpdate = false;
    
    // Verificar se arquivo .env existe
    if (fs.existsSync(envPath)) {
        envContent = fs.readFileSync(envPath, 'utf8');
        console.log('‚úÖ Arquivo .env encontrado');
    } else {
        console.log('‚ö†Ô∏è Arquivo .env n√£o encontrado - ser√° criado');
        needsUpdate = true;
    }
    
    // Verificar vari√°veis existentes
    const hasDatabaseUrl = envContent.includes('DATABASE_URL=');
    const hasJwtSecret = envContent.includes('JWT_SECRET=');
    const hasAdminUsername = envContent.includes('ADMIN_USERNAME=');
    const hasAdminPassword = envContent.includes('ADMIN_PASSWORD=');
    const hasNodeEnv = envContent.includes('NODE_ENV=');
    
    console.log('\n2Ô∏è‚É£ Status das vari√°veis:');
    console.log(`DATABASE_URL: ${hasDatabaseUrl ? '‚úÖ Configurada' : '‚ùå FALTANDO'}`);
    console.log(`JWT_SECRET: ${hasJwtSecret ? '‚úÖ Configurada' : '‚ùå FALTANDO'}`);
    console.log(`ADMIN_USERNAME: ${hasAdminUsername ? '‚úÖ Configurada' : '‚ùå FALTANDO'}`);
    console.log(`ADMIN_PASSWORD: ${hasAdminPassword ? '‚úÖ Configurada' : '‚ùå FALTANDO'}`);
    console.log(`NODE_ENV: ${hasNodeEnv ? '‚úÖ Configurada' : '‚ùå FALTANDO'}`);
    
    // Se DATABASE_URL est√° faltando, mostrar instru√ß√µes
    if (!hasDatabaseUrl) {
        console.log('\n‚ùå DATABASE_URL N√ÉO CONFIGURADA!');
        console.log('\nüîß Para configurar:');
        console.log('1. Acesse o Render Dashboard: https://dashboard.render.com/');
        console.log('2. V√° para seu projeto');
        console.log('3. Clique em "Environment"');
        console.log('4. Procure por DATABASE_URL ou crie uma nova');
        console.log('5. Formato esperado: postgresql://usuario:senha@host:porta/banco?sslmode=require');
        
        console.log('\nüìù Exemplo de DATABASE_URL:');
        console.log('postgresql://gestorpro_user:abc123@dpg-abc123-a.oregon-postgres.render.com/gestorpro_db?sslmode=require');
        
        console.log('\nüí° Se voc√™ n√£o tem um banco PostgreSQL no Render:');
        console.log('1. V√° para "Services" > "New" > "PostgreSQL"');
        console.log('2. Crie um novo banco PostgreSQL');
        console.log('3. Copie a URL de conex√£o fornecida');
        console.log('4. Adicione ?sslmode=require ao final da URL');
        
        needsUpdate = true;
    }
    
    // Criar template do arquivo .env se necess√°rio
    if (needsUpdate) {
        console.log('\n3Ô∏è‚É£ Criando template do arquivo .env...');
        
        const template = `# Configura√ß√£o do Banco de Dados (OBRIGAT√ìRIO)
# Substitua pela sua URL real do Render
DATABASE_URL=postgresql://usuario:senha@host:porta/banco?sslmode=require

# Configura√ß√£o de Seguran√ßa
JWT_SECRET=e2ea0bb89f...

# Usu√°rio Admin
ADMIN_USERNAME=19vsilva
ADMIN_PASSWORD=sua_senha_atual

# Ambiente
NODE_ENV=production

# Configura√ß√£o para desenvolvimento local (opcional)
# DB_HOST=localhost
# DB_PORT=5432
# DB_NAME=gestorpro_dev
# DB_USER=postgres
# DB_PASSWORD=sua_senha
`;
        
        fs.writeFileSync(envPath, template);
        console.log('‚úÖ Arquivo .env criado/atualizado');
        console.log('üìù Edite o arquivo .env e configure a DATABASE_URL real');
    }
    
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Configure a DATABASE_URL no arquivo .env');
    console.log('2. Execute: node check-env.js');
    console.log('3. Execute: node test-database.js');
    console.log('4. Execute: node setup-database.js');
    
    if (!hasDatabaseUrl) {
        console.log('\n‚ö†Ô∏è IMPORTANTE: Configure a DATABASE_URL antes de continuar!');
    }
}

// Executar configura√ß√£o
setupEnv(); 